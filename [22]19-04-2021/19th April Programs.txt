Program-1

Somesh is working on Number Strings.
He got an idea to find the smallest possible number by 
deleting some digits from the number without changing 
the relative order of digits in it.

You will be given a integer String 'num', and an integer n.
Find the smallest number possible after deleting n digits from 'num'.

Note: If the number string 'num' turns to empty, print 0.

Input Format:
-------------
Line-1 : A string num, consist of digits only.
Line-2 : An integer n, number of digits to delete.

Output Format:
--------------
Print the smallest possible number.


Sample Input-1:
---------------
1432219
3

Sample Output-1:
----------------
1219

Explanation: 
------------
Delete the three digits 4, 3, and 2 to form the smallest number 1219.

Sample Input-2:
---------------
10200
1

Sample Output-2:
----------------
200

Explanation:
------------
Delete the leading 1 and the smallest number is 200. 
Note that the output must not contain leading zeroes.





case =1
input =10200
1
output =200

case =2
input =1432219
3
output =1219

case =3
input =8767445367656
5
output =44367656

case =4
input =100230450607
4
output =40607



import java.util.*;

public class RemoveKdigits {
    public String removeKdigits(String num, int k) {
        int digits = num.length() - k;
        char[] stk = new char[num.length()];
        int top = 0;
        // k keeps track of how many characters we can remove
        // if the previous character in stk is larger than the current one
        // then removing it will get a smaller number
        // but we can only do so when k is larger than 0
        for (int i = 0; i < num.length(); ++i) {
            char c = num.charAt(i);
            while (top > 0 && stk[top-1] > c && k > 0) {
                top -= 1;
                k -= 1;
            }
            stk[top++] = c;
        }
        // find the index of first non-zero digit
        int idx = 0;
        while (idx < digits && stk[idx] == '0') idx++;
        return idx == digits? "0": new String(stk, idx, digits - idx);
    }
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String num = sc.next();
		int k=sc.nextInt();
		System.out.print(new RemoveKdigits().removeKdigits(num,k));
	}
}




Program-2

You are given a list of digits( 0 to 9) digits[].
A number is formed using the given order of the list.
for example: given list is [1,3,2], then number is 132.

Find the next biggest number in the lexographic order using 
the same list of digits, by using the each digit in the list only once,
and print the digit list of such biggest number.

If such biggest number is not possible, 
print the smallest lexographic order of the digits.

Input Format:
-------------
Line-1 : An integer N, number of digits.
Line-2 : N space separated integers, list of digits.

Output Format:
--------------
Print an integer list.


Sample Input-1:
---------------
4
1 2 4 3

Sample Output-1:
----------------
[1, 3, 2, 4]


Sample Input-2:
---------------
4
4 3 2 1

Sample Output-2:
----------------
[1, 2, 3, 4]



back end test cases

case =1
input =4
4 3 2 1
output =[1, 2, 3, 4]

case =2
input =4
1 2 4 3
output =[1, 3, 2, 4]

case =3
input =10
7 0 9 4 3 2 9 8 4 1
output =[7, 0, 9, 4, 3, 4, 1, 2, 8, 9]

case =4
input =8
1 0 0 2 3 4 2 3
output =[1, 0, 0, 2, 3, 4, 3, 2]




import java.util.*;

public class NextPermutation {
    public void nextPermutation(int[] digits) {
        int i = digits.length - 2;
        while (i >= 0 && digits[i + 1] <= digits[i]) {
            i--;
        }
        if (i >= 0) {
            int j = digits.length - 1;
            while (j >= 0 && digits[j] <= digits[i]) {
                j--;
            }
            swap(digits, i, j);
        }
        reverse(digits, i + 1);
    }

    private void reverse(int[] digits, int start) {
        int i = start, j = digits.length - 1;
        while (i < j) {
            swap(digits, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] digits, int i, int j) {
        int temp = digits[i];
        digits[i] = digits[j];
        digits[j] = temp;
    }
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N=sc.nextInt();
		int[] digits=new int[N];
		for(int i=0;i<N;i++)
			digits[i]=sc.nextInt();
		new NextPermutation().nextPermutation(digits);
		System.out.println(Arrays.toString(digits));
	}
}

NEIL GOGTE: https://www.geeksforgeeks.org/find-next-greater-number-set-digits/

Program-3


Kiran is playing with strings and its subsequences.
A subsequence can be formed from a string by deleting some characters 
(may be string itself)

Kiran has given two strings S and T, 
your task to form T by concatenating the subsequences of S  

Return the minimum number of subsequences required to form T.
If the task is impossible, return -1 .

Input Format:
-------------
Line-1 -> Two strings S and T

Output Format:
--------------
Print an integer as result.


Sample Input-1:
---------------
abc abcbc

Sample Output-1:
----------------
2

Explanation: 
------------
T = "abcbc" can be formed by "abc" and "bc",
which are subsequences of S = "abc".


Sample Input-2:
---------------
abc acdbc

Sample Output-2:
----------------
-1

Explanation: 
------------
string T cannot be constructed from the
subsequences of string S due to the character "d" in string T.




case =1
input =abc abcbc
output =2

case =2
input =abc acdbc
output =-1

case =3
input =qwertyuiopasdfghjkl qwertyujhgfrtyuilgftyuioplkjgfdwertyuiooiuytasdfghjfwertyuioldfghjkqwertyuisdfghjk
output =23

case =4
input =qazxswedcvfrtgbnhyujmkiolp qazxswedcvfrtgbhyujmiolwsxcderfvbgtyhnmjukvfrtgbhyujmkiklbcdertjkredfghjkoiuytrewasfg
output =30




import java.util.*;

class ShortestWay{
	public int shortestWay(String source, String target) {
		char[] cs = source.toCharArray(), ts = target.toCharArray();
		int[][] idx = new int[cs.length][26];
		idx[cs.length - 1][cs[cs.length - 1] - 'a'] = cs.length; 
		for (int i = cs.length - 2; i >= 0; i--) {
			idx[i] = Arrays.copyOf(idx[i + 1],26);
			idx[i][cs[i] - 'a'] = i + 1; 
		}
		int j = 0, res = 1;
		for (int i = 0; i < ts.length; i++) {
			if (j == cs.length) {
				j = 0;
				res++;
			}
			j = idx[j][ts[i] - 'a'];
			if (idx[0][ts[i] - 'a'] == 0) return -1;
			if (j == 0) {
				res++;
				i--;
			}
		}
		return res;
	}
	
	 public static void main(String args[] ) {

		    Scanner sc = new Scanner(System.in);
			String word1=sc.next();
			String word2=sc.next();
			System.out.println(new ShortestWay().shortestWay(word1,word2));
	 } 	
}