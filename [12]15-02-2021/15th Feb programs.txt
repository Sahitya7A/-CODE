Program-1

Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like given below

   QWERTYUIOP/qwertyuiop
   ASDFGHIJKL/asdfghjkl
   ZXCVBNM/zxcvbnm


    You may use one character in the keyboard more than once.
    You may assume the input string will only contain letters of alphabet(A-Z/a-z).
    Assume the alphabets are case sensitive 
    Print -1 for all Boundary Conditions 

Example:

input =hello Alaska Dad Peace
output = 
Alaska 
Dad


Here the words Alaska and Dad are the characters of second(same) only 


input =asdf qwer zxcv
output =
asdf
qwer
zxcv

input =Dad hAS the Key
output = Dad
hAS

input =to be or not TO be 
output = to
or
TO



import java.util.*;
class Test {
    public static List<String> findWords(String[] words) {
        HashSet<Character> row1 = new HashSet<>();
        HashSet<Character> row2 = new HashSet<>();
        HashSet<Character> row3 = new HashSet<>();
        
        row1.add('Q');
        row1.add('W');
        row1.add('E');
        row1.add('R');
        row1.add('T');
        row1.add('Y');
        row1.add('U');
        row1.add('I');
        row1.add('O');
        row1.add('P');
        row1.add('q');
	row1.add('w');
        row1.add('e');
        row1.add('r');
        row1.add('t');
        row1.add('y');
        row1.add('u');
        row1.add('i');
        row1.add('o');
        row1.add('p');
        
        row2.add('A');
        row2.add('S');
        row2.add('D');
        row2.add('F');
        row2.add('G');
        row2.add('H');
        row2.add('J');
        row2.add('K');
        row2.add('L');
        row2.add('a');
        row2.add('s');
        row2.add('d');
        row2.add('f');
        row2.add('g');
        row2.add('h');
        row2.add('j');
        row2.add('k');
        row2.add('l');
        
        
        row3.add('Z');
        row3.add('X');
        row3.add('C');
        row3.add('V');
        row3.add('B');
        row3.add('N');
        row3.add('M');
        row3.add('z');
        row3.add('x');
        row3.add('c');
        row3.add('v');
        row3.add('b');
        row3.add('n');
        row3.add('m');
        
        List<String> res = new ArrayList<>();
        
        for(String word : words)
			{
            boolean row1Yes = true, row2Yes = true, row3Yes = true;
            for(char c : word.toCharArray()) {
                if(!row1.contains(c))
                    row1Yes = false;
                
                if(!row2.contains(c))
                    row2Yes = false;
                
                if(!row3.contains(c))
                    row3Yes = false;
                
            }
            if(row1Yes || row2Yes || row3Yes)
                res.add(word);
       }
        
        return res;
    }
	public static void main(String [] args) {
	Scanner sc = new Scanner(System.in);
	String words = sc.nextLine();
	String listwords []= words.split(" ");
		List<String> result = findWords(listwords);
		if(result.size()==0)
			System.out.print(-1);
		else
		for(String str : result)
			System.out.println(str);
	}
}


back end test cases

case = 1
input =QPWoertl aLdSkjDGh mNzXCv qwert
output =
aLdSkjDGh
mNzXCv
qwert


case = 2
input =asdf qwer zxcv
output =
asdf
qwer
zxcv

case = 3
input =Dad has the Key and flaG
output = Dad
has
flaG

case = 4
input =to be or not to be 
output = to
or
to

case = 5
input =ascv
output = -1

case = 6
input =a B c D e F
output = 
a
B
c
D
e
F



Program-2

Write a program to read two strings from the user and check if they are isomorphic.

Two strings are isomorphic if the characters in 's' can be replaced to get 't'.

All occurrences of a character must be replaced with another character while preserving the order of characters.
No two characters may map to the same character but a character may map to itself.


Note:
You may assume both s and t have the same length and all inputs are lower case alphabets(a-z)

input = 
egg
app
output = true

input = 
foo
bar
output = false

input = 
papel
title
output = true


import java.util.*;
class Test
{
public static void checkIsomorphic(String s, String t) 
{
HashMap<Character, Character> hm = new HashMap<Character, Character>();
  
  
  if(s.length() != t.length())
	{
		System.out.println(false);
		return ;
	}
 
	for(int i=0 ; i<s.length() ; i++)
    {
        if(hm.containsKey(s.charAt(i)))
        {
            if(t.charAt(i) != hm.get(s.charAt(i)))
			{  
				System.out.println(false); 
			     return; 
			}
        }
        else
        {
            if(hm.containsValue(t.charAt(i)))
				{  
				System.out.println(false); 
			     return; 
				}
            hm.put(s.charAt(i), t.charAt(i));
        }
    }
    System.out.println(true);
}

public static void main(String [] args ) 
	{
	Scanner sc = new Scanner(System.in);
	String str1 = sc.next();
	String str2 = sc.next();
	checkIsomorphic(str1,str2);
	}
}


back end test cases

case = 1
input = 
abcdefghijklmnopqrstuvwxyz
zyxwvutsrqponmlkjihgfedcba
output = true

case = 2
input = 
abcdefghijklm
zyxwvutsrqpon
output = true

case = 3
input = hellohello
vaddpvadpp
output = false

case = 4
input = system
ayatem
output = true



Program-3
/*

Given a number in string format, print the nth smallest number if exists 
else print -1 


input = 47912478
3
output = 4

in the above test case we have 4 as the third smallest number.

input = 1111
2
output = -1

in the above test case we dont have any second smallest number so output is -1


input = 100
1
output = 0

in the above test case we have 0 as the first smallest number so the output is 0 



*/


import java.util.*;
class Test 
{
public static void main(String args[]) {
Scanner sc=new Scanner(System.in);
String s=sc.next();
TreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
 for(int i=0;i<s.length();i++)
      map.put(Integer.parseInt(""+s.charAt(i)), map.getOrDefault(Integer.parseInt(""+s.charAt(i)),0)+1);
 int n= sc.nextInt();
 Set<Integer> keys = map.keySet();
 int count=1;
 for(int key : keys)
	{
	     if(count==n)
			 {
			System.out.print(key);
		    return ;
			}
	count++;
	}
 System.out.print(-1);
 } 
 } 


 back end test cases
 case = 1
 input = 135792468
 5
 output = 5

 case = 2
 input = 1
 2
 output = -1

 case = 3
 input = 100234
 2
 output = 1

 case = 4
 input = 777
 1
 output = 7

 case = 5
 input = 0
 1
 output = 0

 case = 6
 input = 888
 2
 output = -1

