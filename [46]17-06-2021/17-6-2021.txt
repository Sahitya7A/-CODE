Program-1

Mary is working as BA in a Big Company. 
She will be given every time all the relaseses of the software developed in the company. 
When the client asks for the latest one. She has to print the latest one released by the company. 

There may be multiple checkins of the software in a given branch. 
Each branch may also have sub branches. 


For example release 4-6-3 refers to the 
fourth checkin in the sixth sub branch of the third main branch. 
This hierarchy can go upto any number of levels. 

If a level is missing it is considered as level 0 in that hierarchy. 

For example 2-4-8 is  same as 2-4-8-0 or even same as 2-4-8-0-0. 

The higher numbers denote more recent releases. 

For example 2-4-8-1 is more recent than 2-4-8 but less recent than 2-5


Input Format:
-------------
A single line space separated strings, list of releases 

Output Format:
--------------
Print the latest release of the software.


Sample Input-1:
---------------
1-2 1-2-3

Sample Output-1:
----------------
1-2-3

Sample Input-2:
---------------
3-5-4 3-5-7 3-5-7-1 3-6

Sample Output-2:
----------------
3-6




back end test cases


case =1
input =1-2 1-2-4 1-2-3
output =1-2-4

case =2
input =1-2 1-2-3 1-5-3 1-2-3-4 1-2-3-4-5-6
output =1-5-3

case =3
input =5-4-3-2-1 5-4-3-2-2 5-4-3-2-2-1 5-4-3-4 5-4-3-2-4-1-5-6
output =5-4-3-4

case =4
input =6-2-7-8-9-4-6-3-5-2-3-4-8 6-2-7-8-9-4-5-3-7-2-1 6-2-7-8-9-4-7-5-4 6-2-7-8-9-4-7-3-5-2-3-4-8
output =6-2-7-8-9-4-7-5-4



import java.util.Scanner;

class LatestRelease{
	public static int latestRelease(String version1, String version2) {
		String[] levels1 = version1.split("\\-");
		String[] levels2 = version2.split("\\-");
		
		int length = Math.max(levels1.length, levels2.length);
		for (int i=0; i<length; i++) {
			Integer v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;
			Integer v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;
			int compare = v1.compareTo(v2);
			if (compare != 0) {
				return compare;
			}
		}
		return 0;
	}
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String[] release=sc.nextLine().split(" ");
		String latest=release[0];
		for(int i=1;i<release.length;i++){
			int result=latestRelease(latest,release[i]);
			if(result==0){
				if((latest.compareTo(release[i]))>0)
					latest=release[i];
			}
			else if(result==-1)
			{
				latest=release[i];
			}
		}
		System.out.println(latest);
	}
}



Program-2


Sharanya is given a group of words , she is playing a game in which she has to 
return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters.

Consists only of lowercase English letters.

If no 2 words are present print 0

Input = abcw baz foo bar xtfn abcdef
Output = 16

Explanation: The two words can be "abcw", "xtfn".


Input = a ab abc d cd bcd abcd
Output = 4

Explanation: The two words can be "ab", "cd".


Input a aa aaa aaaa
Output = 0

/*
This solution is based on the logic that all the words are made up of 26 characters, i.e, a-z. 
So what we are doing here is making a bitmask for each word and then comparing them with the 
other words whether their AND operation gives us zero or not. 
If it gives us zero, we can say that there are no conflicts in the letters in between the two words.


We pre-process to calculate the bitmask of N words.
We define the bitmask of a word as: If this word contains character a then we turn on bit 0th, 
b then turn on bit 1th..., z then turn on bit 25th.
Now words[i] and words[j] have no common letters if and only if words[i] & words[j] == 0.
*/

import java.util.*;

class MaxProduct {
	public int maxProduct(String[] words) {
       int res=0;
        int n=words.length;
        int nums[]=new int[n];
        for(int i=0;i<n;i++){
            for(char c : words[i].toCharArray())
                nums[i]=nums[i] | (1 << (c-'a'));
        }
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                  if((nums[i]&nums[j]) == 0)
					res = Math.max(res, words[i].length() * words[j].length());
            }
        }
        return res;
    }

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String[] sarr=sc.nextLine().split(" ");
		System.out.println(new MaxProduct().maxProduct(sarr));
	}
}






import java.util.*;

class MaxProduct {
	public int maxProduct(String[] words) {
		int max=0;
		int n=words.length;
		for(int i=0;i < n;i++)
			for(int j=i+1; j < n; j++)
				if(isUnique(words[i],words[j]))
					max=Math.max(((words[i].length())*(words[j].length())),max);
		
		return max;
	}

	public boolean isUnique(String w1,String w2)
	{
		
		boolean flag=false;
		HashSet<Character>hs = new HashSet<>();

		for(int i=0; i < w1.length(); i++)
			hs.add(w1.charAt(i));	
		
		for(int i=0; i < w2.length();i++)
			if(hs.contains(w2.charAt(i)))
				return false;

		return true;
	}

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String[] sarr=sc.nextLine().split(" ");
		System.out.println(new MaxProduct().maxProduct(sarr));
	}
}


back end test cases
case = 1
input =abcd defg abc fgedca kjmn uyhtz
output = 30

case = 2
input =a b c d e
output =1


case = 3
input =aa abc def bb 
output = 9

case = 4
input = abcdefghijklmnopqrstuvwxyz zyxwvutsrqponnmlkjihgfedcba
output = 0