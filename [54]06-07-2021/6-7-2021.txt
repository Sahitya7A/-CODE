Program-1


Hemanth is working with numbers,
He is given a list of N numbers.

He need to choose a pair(P,Q) of numbers and them to binary numbers.
And count the number of bits to be converted in P to make P = Q.

Your task is to find the total sum of count of bits to be converted in 
all the pairs of the list of numbers.

Input Format:
-------------
Line-1: An integer, N number of values.
Line-2: N space separated integers, positive numbers.

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
3
2 13 5

Sample Output-1:
----------------
8

Explanation:
------------
Given list of numbers: [2, 13, 5]
Binary numbers are as follows: 0010, 1101, 0101

The Total sum is:   countOfConversion(2, 13) + 
                    countOfConversion(13, 5) + 
                    countOfConversion(5, 2) = 4 + 1 + 3 = 8.


Sample Input-2:
---------------
4
6 14 17 11

Sample Output-2:
----------------
18

Explanation:
------------
Given list of numbers: [6, 14, 17, 11]
Binary numbers are as follows: 00110, 01110, 10001, 01011

The Total sum is:   countOfConversion(6, 14) + 
                    countOfConversion(6, 17) + 
                    countOfConversion(6, 11) + 
                    countOfConversion(14, 17) +
                    countOfConversion(14, 11) + 
                    countOfConversion(17, 11) = 1 + 4 + 3 + 5 + 2 + 3 = 18
                    


case =1
input =3
2 13 5
output =8

case =2
input =4
6 14 17 11
output =18

case =3
input =15
902164264 99450993 303417611 673446678 731203569 207939151 546220405 200092494 229691222 836432080 538429133 698086932 402531576 799056945 206104624
output =1570

case =4
input =25
524681462 299403550 681619274 342219958 615678752 563930373 565192324 983214940 818376183 496225127 841366921 877151405 134963230 922739691 536114135 901129775 530155609 22923542 652046817 41440983 68192137 9050619 538637611 787064631 997592876
output =4542




import java.util.*;

class TotalHammingDistance{
	public int totalHammingDistance(int[] nums) {
		int total = 0, n = nums.length;
		for (int j=0;j<32;j++) {
			int bitCount = 0;
			for (int i=0;i<n;i++) 
				bitCount += (nums[i] >> j) & 1;
			total += bitCount*(n - bitCount);
		}
		return total;
	}
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int mat[]=new int[N];
			for(int j=0;j<N;j++)
				mat[j]=sc.nextInt();
		System.out.println(new TotalHammingDistance().totalHammingDistance(mat));
	}
}





Program2


A chocolate vendor prepared a big chocolate of size M*N.
This choloate is made using two kinds of chocolates, white and dark chocolate.
Where white chocolate indiactes with '0' and Dark Chocolate is with '1'.

You will be given the big chocolate of size M*N.
Your task is to find out, number of dark chacolates can be formed
with rectangular shapes from the grid.

NOTE: You can assume that all the 1*1 chocolate have same size.

Input Format:
-------------
Line-1: Two space seprated integers, M and N size of chocolate.
Next M lines: N space seprated integers, only 0's and 1's.

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
2 3
1 1 0
0 1 1

Sample Output-1:
----------------
7

Explanation:
------------
There are 4 dark-chocolates of size 1x1.
There are 2 dark-chocolates of size 1x2.
There are 1 dark-chocolates of size 2x1.


Sample Input-2:
---------------
3 4
1 0 1 1
1 1 0 1
1 1 1 0

Sample Output-2:
----------------
20

Explanation:
------------
There are 9 dark-chocolates of size 1x1
There are 4 dark-chocolates of size 1x2
There is 1 dark-chocolate of size 1x3
There are 4 dark-chocolate of size 2x1
There is 1 dark-chocolate of size 3x1
There is 1 dark-chocolate of size 2x2




import java.util.*;

class NumSubMat {
	public int numSubmat(int[][] mat) {
			
		int M = mat.length, N = mat[0].length;

		int res = 0;

		int[] h = new int[N];
		for (int i = 0; i < M; ++i) {
			for (int j = 0; j < N; ++j) {
				h[j] = (mat[i][j] == 0 ? 0 : h[j] + 1);
			}
			res += helper(h);
		}

		return res;
	}

	private int helper(int[] A) {

		int[] sum = new int[A.length];
		Stack<Integer> stack = new Stack<>();

		for (int i = 0; i < A.length; ++i) {

			while (!stack.isEmpty() && A[stack.peek()] >= A[i]) stack.pop();

			if (!stack.isEmpty()) {
				int preIndex = stack.peek();
				sum[i] = sum[preIndex];
				sum[i] += A[i] * (i - preIndex);
			} else {
				sum[i] = A[i] * (i + 1);
			}

			stack.push(i);
		}

		int res = 0;
		for (int s : sum) res += s;

		return res;
	}
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int M=sc.nextInt();
		int N=sc.nextInt();
		int mat[][]=new int[M][N];
		for(int i=0;i<M;i++)
			for(int j=0;j<N;j++)
				mat[i][j]=sc.nextInt();
		System.out.println(new NumSubMat().numSubmat(mat));
	}
}


case =1
input =2 3
1 1 0
0 1 1
output =7

case =2
input =3 4
1 0 1 1
1 1 0 1
1 1 1 0
output =20

case =3
input =5 8
1 1 1 1 1 1 0 0
1 0 0 1 0 1 0 0
1 0 1 1 1 1 1 1
0 0 1 1 1 1 1 1
0 1 1 0 1 1 1 1
output =138

case =4
input =10 8
0 0 1 0 1 1 0 0
0 0 1 1 0 0 0 0
0 0 1 0 0 0 1 1
0 1 1 0 0 0 1 0
1 1 1 1 0 1 1 0
0 0 0 0 1 0 0 1
0 1 0 1 1 1 1 0
1 1 1 1 0 0 1 1
1 0 1 0 1 0 0 1
0 1 1 1 1 0 1 1
output =98



