Program-1

write a program to read a sentence and find the sum of digits in each string if String contains 't' or 'T'.
if no digits are found print 0

the input string contains only numbers between 0-9



for example:
input =
Tw1nkl3 to1 add4
output =
Tw1nkl3(4)
to1(1)
add4(0)

input =
add me
output =
add(0)
me(0)



back end test cases

case = 1
input =Hel1l2o wo1rl2
output =
Hel1l2o(0)
wo1rl2(0)


case = 2
input =at8 bhT9 ttTT99
output =
at8(8)
bhT9(9)
ttTT99(18)

case = 3
input =a8 b9 c3 t5
output = 
a8(0)
b9(0)
c3(0)
t5(5) 

case = 4 
input =tT TTTTtttt H1el and
output = 
tT(0)
TTTTtttt(0)
H1el(0)
and(0)



import java.util.*;
class Test 
{
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
String line = sc.nextLine();
String arr[]=line.split(" ");
	for(String word : arr)
	{
	int sum = 0;
		if(word.contains("t") || word.contains("T"))
		{
			for(int i=0;i<word.length();i++)
			if(word.charAt(i)>=48 && word.charAt(i)<=57)
			sum = sum + word.charAt(i)-'0';
			System.out.println(word+"("+sum+")");
		}
		else
			System.out.println(word+"("+sum+")");
	}
}
}




Program-2 

Praveen will be given a word. 
His main work is to remove all the duplicated letters from W,
the letters should be removed in such a way that the resulatant word R, contains no duplicate letters and all
distinct letters from W should be present in R.

R should appear first in the dictionary order. 


input = cbadccb
output = adcb

input = silicosis
output = ilcos    



Back end test cases 

case = 1
input =cbadccb
output ="adcb"

case = 2
input =silicosis
output ="ilcos"

case = 3
input =bcabc
output ="abc"

case = 4
input =yellowwooddoor 
output ="yelowdr"



import java.util.*;
class SmallestSubsequence {
    public String smallestSubsequence(String S) {
        Stack<Integer> stack = new Stack<>();
        int[] last = new int[26], seen = new int[26];
        for (int i = 0; i < S.length(); ++i)
            last[S.charAt(i) - 'a'] = i;
        for (int i = 0; i < S.length(); ++i) {
            int c = S.charAt(i) - 'a';
            if (seen[c]++ > 0) continue;
            while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()])
                seen[stack.pop()] = 0;
            stack.push(c);
        }
        StringBuilder sb = new StringBuilder();
        for (int i : stack) sb.append((char)('a' + i));
        return sb.toString();
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		System.out.println(new SmallestSubsequence().smallestSubsequence(s));
	}
}




Program-3

BCCI wants to select the group of bowlers for an upcoming test-series, you want
to choose the group with highest number of wickets, which is the sum of wickets
taken by all the bowlers in that group.

However, the bowler group is not allowed to have any disputes. 
A dispute exists if a younger bowler has strictly highest wickets than an older bowler. 
A dispute does not occur between bowlers of the same age.

You are given information of N bowlers as two lists, wickets and ages, 
where each wickets[i] and ages[i] represents the wickets and age of the i-th bowler, 
respectively, return the highest number of wickets of all possible bowler groups.

Input Format:
-------------
Line-1: An integer N, number of bowlers.
Line-2: N space separated integers, wickets[].
Line-3: N space separated integers, ages[].

Output Format:
--------------
An integer, highest number of wickets of all possible bowler groups.


Sample Input-1:
---------------
4
5 3 5 6
3 5 4 2

Sample Output-1:
----------------
10

Explanation:
------------
It is best to choose 2 bowlers of age 3 and 4. 


Sample Input-2:
---------------
5
5 3 5 6 3
2 5 4 2 1

Sample Output-2:
----------------
14

Explanation:
------------
It is best to choose 3 bowlers of age 1 and 2. 
Notice that you are allowed to choose multiple bowlers of the same age.

Sample Input-3:
---------------
5
1 3 5 10 15
1 2 3 4 5

Sample Output-3:
----------------
34

Explanation:
------------
You can choose all the bowlers.


case = 1
input =4
1 2 3 4
4 3 2 1
Output =4

case = 2
input =4
1 2 3 5
8 9 10 1
Output =6

case = 3
input =4
5 5 3 6
3 5 4 2
Output =10

case = 4
input =9
2 1 1 2 2 5 5 3 6
3 5 4 2 1 1 5 1 5
Output =21





import java.util.*;

class BestTeamScore {
	public int bestTeamScore(int[] scores, int[] ages) {
       int n = ages.length;
       int[][] candidate = new int[n][2];
       
       for(int i=0; i<n; i++) {
           candidate[i][0] = ages[i];
           candidate[i][1] = scores[i];
       }
       Arrays.sort(candidate, (a,b) -> a[0] == b[0] ? a[1]-b[1] : a[0]-b[0]);
       int[] dp = new int[n];
       dp[0] = candidate[0][1];
       int max = dp[0];
       for(int i=1; i<n; i++) {
           dp[i] = candidate[i][1];
           for(int j=0; j<i; j++) {
               if(candidate[j][1] <= candidate[i][1]) {
                   dp[i] = Math.max(dp[i], candidate[i][1]+dp[j]);
               }  
           }
           max = Math.max(dp[i], max);
       }
       return max;
   }
   public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int scores[]=new int[n];
		int ages[]=new int[n];
		for(int i=0;i<n;i++)
				scores[i]=sc.nextInt();
		for(int i=0;i<n;i++)
				ages[i]=sc.nextInt();				
		System.out.println(new BestTeamScore().bestTeamScore(scores,ages));
	}
}