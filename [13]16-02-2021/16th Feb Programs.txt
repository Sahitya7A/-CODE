Program-1

Given a flat surface of m*n size, each position contains either empty '0', a Iron ball 'B' or Metal Block 'M' (The Metal block is an anti magnetic block), 

Your task is to find the maximum Iron Balls you can attarct by using a Magnet.

The Magnet attracts all the iron balls in the same row and column from their positions until the Metal Block,since the Metal block is an anti magnetic block.

Note: You can only put the magnet at an empty position.


Input Format:
-------------
Line-1 -> Two Integers, M and N, size of the grid
Next M Lines -> N space separated characters, allowed characters '0', 'B', 'M'


Output Format:
--------------
Print an integer, maximum Iron Balls you can attarct by using a Magnet


Sample Input-1:
---------------
3 4
0 B 0 0 
B 0 M B
0 B 0 0

Sample Output:
--------------
3 

Explanation: 
------------
For the given grid,

0 B 0 0 
B 0 M B
0 B 0 0

Placing a Magnet at (1,1) attacts 3 iron balls.
 




import java.util.*

public class AttractBalls {
	 public static int maxAttractBalls(char[][] grid) {
	        int m = grid.length;
	        int n = m != 0 ? grid[0].length : 0;
	        int result = 0;
	        int rowhits = 0;
	        int[] colhits = new int[n];
	        for (int i = 0; i < m; i++) {
	            for (int j = 0; j < n; j++) {
	                if (j == 0 || grid[i][j - 1] == 'M') {
	                    rowhits = 0;
	                    for (int k = j; k < n && grid[i][k] != 'M'; k++)
	                rowhits += grid[i][k] == 'B' ? 1 : 0;
	                }
	                if (i == 0 || grid[i - 1][j] == 'M') {
	                    colhits[j] = 0;
	                    for (int k = i; k < m && grid[k][j] != 'M'; k++)
	                        colhits[j] += grid[k][j] == 'B' ? 1 : 0;
	                }
	                if (grid[i][j] == '0')
	                    result = Math.max(result, rowhits + colhits[j]);
	            }
	        }
	        return result;
	    }
  
    
    public static void main(String args[] ) {
		 Scanner scan = new Scanner(System.in);
			int R=scan.nextInt();
			int C=scan.nextInt();      

			char[][] flat=new char[R][C];
		       for(int i=0; i<R; i++)
		       {
		           for(int j=0; j<C; j++)
		           {
		        	   flat[i][j] = scan.next().charAt(0);
		           }
		       }
		       System.out.println(maxAttractBalls(flat));
	}
}


back end test cases

case =1
input =3 4
0 B 0 0 
B 0 M B
0 B 0 0
output =3

case =2
input =5 6
0 0 0 B B B
B B 0 B 0 B
B 0 M B 0 0
B B B 0 0 B
0 0 0 B 0 0
output =8

case =3
input =5 6
0 0 B B B B
B B 0 B 0 B
B 0 M B B 0
B B B 0 M B
0 0 0 B B 0
output =7

case =4
input =6 7
0 0 0 0 B 0 B
0 B B B 0 B 0
B B 0 0 M 0 B
0 B B M B B M
0 M B 0 B M 0
0 B B B 0 B B
output =7

case =5
input =10 10
0 0 0 0 B B 0 0 0 B
0 0 0 0 0 B B 0 0 0
B 0 0 0 B 0 0 B B 0
0 B 0 0 0 B B B B B
B 0 0 B B B 0 B 0 B
0 B 0 B B B 0 B 0 B
0 0 B 0 0 0 0 0 B B
0 B B B 0 B B 0 0 0
0 B 0 B 0 B 0 0 0 B
0 B 0 B B B 0 0 0 0
output =12



Program-2


Ramu is the principal of the school . He has given the heights of the students . The students are made to stand in the assembly.
Now he asks the students to stand in sorted order of their heights diagonally 
The students started arranging themselves according to their heights.

You will be given initial heights of the students.
Now it is your task to find the final state of the assembly of students and print it.

Input Format:
-------------
Line-1: Two space separated integers M and N, Size of the Grid
Next M lines: N space separated integers, heights of the students.



Sample Input-1:
---------------
  3 4
  2   8    5   2
10   9  10   9
   1   5    8   5

Sample Output-1:
----------------
2     5    5     2
5     8    8     9
1  10    9   10


Sample Input-2:
---------------
4 6
10 9  10 7   5    9
5   4    9  9 10 10
8   8    1  9    5    2
1    2   1  5    9    9

Sample Output-2:
----------------
1  9  5 2 5 9
1  4  9 9 7 10
2  5  5 9 9 10
1  8  8 10 9 10

back end test cases 

case =1
input =4 6
10 9 10 7 5 9
5 4 9 9 10 10
8 8 1 9 5 2
1 2 1 5 9 9
output =1 9 5 2 5 9
1 4 9 9 7 10
2 5 5 9 9 10
1 8 8 10 9 10

case =2
input =3 4
2 8 5 2
10 9 10 9
1 5 8 5
output =2 5 5 2
5 8 8 9
1 10 9 10

case =3
input =7 7
8 1 2 6 10 6 4
9 2 10 10 10 7 5
10 6 9 6 4 8 1
5 2 7 3 4 9 4
4 10 6 8 9 3 6
9 3 4 2 2 10 9
10 9 1 5 5 9 3
output =2 1 2 4 1 5 4
2 3 3 4 6 7 6
2 6 3 4 6 8 10
4 2 7 8 6 9 10
1 5 5 8 9 9 10
9 3 5 6 9 9 10
10 9 4 10 10 9 10

case =4
input =10 12
1 7 10 4 2 5 10 8 6 10 9 2
9 8 1 6 2 1 8 4 2 4 2 8
3 3 6 7 10 3 5 1 8 7 1 10
6 2 7 1 7 4 7 1 10 1 9 2
5 6 1 4 9 7 6 3 8 8 6 5
10 1 2 8 9 3 10 3 9 6 5 1
2 3 7 9 9 2 3 4 4 6 9 1
7 8 7 6 5 6 5 8 1 7 9 7
8 4 5 9 3 4 8 2 8 1 4 9
2 10 7 5 9 7 7 7 8 9 3 5
output =1 1 3 2 1 1 1 2 1 2 8 2
2 1 1 4 3 1 1 1 5 2 10 9
1 2 3 1 4 3 2 5 4 7 4 10
2 2 3 3 3 4 4 5 5 6 8 6
1 4 3 4 6 4 5 6 6 8 8 9
3 3 5 6 5 8 7 6 7 7 8 10
2 7 5 6 7 7 8 7 6 9 8 10
4 5 9 6 6 8 8 8 7 7 9 9
8 7 5 9 7 7 8 9 9 7 10 9
2 10 7 8 10 7 9 9 9 9 10 10


case =5
input =3 4
3 3 1 1
2 2 1 2
1 1 1 2
output =
1 1 1 1
1 2 2 2
1 2 3 3




import java.util.*;

class DiagonalSort {
    public int[][] diagonalSort(int[][] mat) {
        // sort diagonals that are starting at top row
        for (int j = 0; j < mat[0].length; j++) {
            fillMat(mat, countDiagonal(mat, 0, j), 0, j);
        }
        
        // diagonals starting at first column
        for (int i = 1; i < mat.length; i++) {
            fillMat(mat, countDiagonal(mat, i, 0), i, 0);
        }
        
        return mat;
    }
    
    private int[] countDiagonal(int[][] mat, int i, int j) {
        // since the constraint specifys mat[i][j] is between 1 and 100, we can use a bucket
        int[] count = new int[101];
        while (i < mat.length && j < mat[0].length)
            count[mat[i++][j++]] ++;
        return count;
    }
    
    private void fillMat(int[][] mat, int[] count, int i, int j) {
        // fill diagonal start with the lowest value in the bucket
        int start = 1;
        while (i < mat.length && j < mat[0].length && start < 101) {
            while (count[start] == 0)
                start ++;
            mat[i++][j++] = start;
            count[start] --;
        }
    }
		
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int mat[][]=new int[m][n];
		for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
			mat[i][j]=sc.nextInt();
		
		mat=new DiagonalSort().diagonalSort(mat);
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++)
				System.out.print(mat[i][j]+" ");
			System.out.println( );
		}
	}
}



Program-3

Naryana Murthy has  two boxes (Box1,Box2) of unique weights of gold coins, where first box weights are subset of second box gold weights.

Now design a method for narayana murthy  to find all the next largest weights of Box1 gold coins in the corresponding locations of box2 , 

if doesn’t exist print  -1.

The Next largest Weight is Weight ‘W’ in Box1 is the first largest weight to its right side weight in Box2.

NOTE: Unique weights means, no two coins will have same weight.

Input Format:
-------------
Line-1: space separated integers, weights of gold coins in the first box.
Line-2: space separated integers, weights of gold coins in the second box.

Output Format:
--------------
Print a list of integers, next largest weights

Sample Input-1:
---------------
4 3 2
1 3 4 2

Sample Output-1:
----------------
-1 4 -1


Sample Input-2:
---------------
5 6 3 4
1 5 3 7 8 6 4 2

Sample Output-2:
----------------
7 -1 7 -1



back end test cases

case =1
input =5 6 3 4
1 5 3 7 8 6 4 2
output =7 -1 7 -1

case =2
input =4 3 2
1 3 4 2
output =-1 4 -1

case =3
input =24 4 1 6 19 2
24 23 4 1 3 27 6 19 2 16
output =27 27 3 19 -1 16

case =4
input =2 4
1 2 3 4
output =3 -1

case =5
input =40 16 28 44 29 35 39 34 42 19 48 2 41 7 4 3
20 8 23 33 38 40 16 28 44 29 15 11 12 35 39 34 42 36 10 9 37 13 19 48 2 41 7 4 3 24
output =44 28 44 48 35 39 42 42 48 48 -1 41 -1 24 24 24



import java.util.*;

class NextGreaterElement {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> myMap = new HashMap<>();

        int[] stack = new int[nums2.length];
        int top = -1;

        for (int i = 0; i < nums2.length; i++) {
            while (top > -1 && nums2[i] > stack[top])
                myMap.put(stack[top--], nums2[i]);
            stack[++top] = nums2[i];
        }

        for (int i = 0; i < nums1.length; i++)
            nums1[i] = myMap.getOrDefault(nums1[i], -1);
        return nums1;
    }
	
	public static void main(String args[] ) throws IOException {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String str1 = br.readLine();
		String[] sarr1 = str.split(" ");
		int[] nums1 = Arrays.asList(sarr).stream().mapToInt(Integer::parseInt).toArray();
		String str2 = br.readLine();
		String[] sarr2 = str.split(" ");
		int[] nums = Arrays.asList(sarr).stream().mapToInt(Integer::parseInt).toArray();
		
		System.out.println(new NextGreaterElement().nextGreaterElement(nums1,nums2));
	}
}