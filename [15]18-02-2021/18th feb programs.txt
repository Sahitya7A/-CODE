Program1

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

if str follows the same pattern print true else false

input =dog cat cat dog
abba
output = true

input =dog cat cat fish
abba
output = false

input =dog cat cat dog
aaaa
output = false

input =dog dog dog dog
abba
output = false

Notes
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.



import java.util.*;
class Test {
    public static void wordPattern(String pattern, String str) {
        
        char[] p=pattern.toCharArray();
        String[] s=str.split(" ");
        if(p.length!=s.length || str.isEmpty())
		{
             System.out.println(false);
		return;
		}
           
      HashMap<Character, String> hm=new HashMap<Character, String>();
        
        for(int i=0;i<s.length;i++)
        {
            if(!hm.containsKey(p[i]) && !hm.containsValue(s[i]))
                 hm.put(p[i],s[i]);
            if((!hm.containsKey(p[i]) && hm.containsValue(s[i])) || (!hm.get(p[i]).equals(s[i])))
			{
             System.out.println(false);
				return;
			}
        
       }
		
             System.out.println(true);
		     
    }
	public static void main(String [] args) {
	Scanner sc = new Scanner(System.in);
	String str=sc.nextLine();
	String pattern = sc.next();
	wordPattern(pattern,str);
	}
}
back end test cases

case = 1
input = dog hello good morning
fghy
output = true

case = 2
input = good morning good going
abad
output = true

case = 3
input =dog cat cat dog
abba
output = true

input =dog cat cat fish
abba
output = false


Program2

Rohan is a  milk vendor.
He has only two aluminimum tins of capacity m and n litres..
Using these 2 aluminimum tins only, he can measure
He has to supply exactly P litres of milk to Sohan.

To measure the milk, following conditions should be followed 
	- Fill one of the tins completely with milk.
	- Empty the other tin.
	- Pour milk from one tin into another tin till it fills completely,
	 or the first tin itself is empty.
	 
Such that, at the end one or both tins contains P litres of the milk.
	
Please help Rohan, to check whether P litres of milk can be measured
using the two tins or not.

Input Format:
-------------
3 space separated integers, m, n and P.

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
3 5 4

Sample Output-1:
----------------
true


Sample Input-2:
---------------
2 4 5

Sample Output-2:
----------------
false


Back end test cases

case =1
input =3 5 4
output =true

case =2
input =2 4 5
output =false

case =3
input =10 15 25
output =true

case =4
input =5 7 9
output =true

case =5
input =11 35 23
output =true


import java.util.*;

class MilkandCup {
	public boolean canMeasureMilk(int x, int y, int z) {
		//limit brought by the statement that water is finallly in one or both buckets
		if(x + y < z) return false;
		//case x or y is zero
		if( x == z || y == z || x + y == z ) return true;
		
		//get GCD, then we can use the property of Bézout's identity
		return z%GCD(x, y) == 0;
	}

	public int GCD(int a, int b){
		while(b != 0 ){
			int temp = b;
			b = a%b;
			a = temp;
		}
		return a;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int P=sc.nextInt();
		System.out.print(new MilkandCup().canMeasureMilk(m,n,P));
	}
}





Program-3


Ismart Shankar is given a set of N pluck cards, each card labelled with a number on it, and he is also
given a difference value as ‘D’.
Now Ismart Shankar has to find out the length of the largest arithmetic set ‘S’.

A subset is called as arithmetic set, iff the difference between the numbers on any two adjacent cards is same as D.

A subset can be derived from the set of N pluck cads by deleting some or no cards without changing the order of the remaining cards.

Input Format:
------------- 
Line-1: Two space separated integers N, D, number of cards, difference.
Line-2: N space separated integers, numbers on the set of cards.

Output Format:
--------------
Print an integer, length of longest arithmetic subset.

Sample Test Case- 1
input = 4 1
1 2 3 4
output = 4

Explanation: The longest arithmetic subset is [1,2,3,4].


Sample Test Case- 2
input = 4 1
1 3 5 7
output = 1

Explanation: The longest arithmetic subset is any single element.


Sample Test Case- 3
Input = 9 -2
1 5 7 8 5 3 4 2 1
output = 4

Explanation: The longest arithmetic susbset is [7,5,3,1].




Back end test cases

case =1
input =6 2
1 2 3 4 6 8
output =4

case =2
input =8 -2
8 1 2 6 5 4 2 0 
output =5

case =3
input =9 -2
1 5 7 8 5 3 4 2 1
output =4

case =4
input =10 1
1 2 3 4 5 6 7 8 9 10
output =10

case =5
input =15 -2
19 17 16 15 14 13 12 11 9 8 6 5 4 3 2
output =6



import java.util.*;

class LongestSubsequence {
    public int longestSubsequence(int[] arr, int difference) {
        Map<Integer, Integer> subseqs = new HashMap<>();
        
        for (int num: arr) {
            int count = subseqs.getOrDefault(num, 0);
            subseqs.put(num + difference, count + 1);
        }
        int max = 1;
        for (int l: subseqs.values()) {
            max = Math.max(max, l);
        }
        return max;
    }

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int d=sc.nextInt();
		int arr[]=new int[n];
		for(int i=0;i<n;i++)
			arr[i]=sc.nextInt();
		
		System.out.println(new LongestSubsequence().longestSubsequence(arr, d));
	}
}