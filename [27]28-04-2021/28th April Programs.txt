Program-1 

Ramu is given a number n(n>0) where he can only do the below mentioned operations 

n is odd, you can replace n with either n + 1 or n - 1 .
n is even, replace n with n/2 .

Ramu has to print the minimum number of replacements needed for n to become 1?


Example 1 
Input = 8
Output = 3

Explanation:
8 -> 4 -> 2 -> 1


Example 2:

input = 7
output = 4

Explanation:
7 -> 8 -> 4 -> 2 -> 1
or
7 -> 6 -> 3 -> 2 -> 1



import java.util.*;

class NumberReplacement{
	public static int numberReplacement(int n) {
	    int c = 0;
	    while (n != 1) {
		if ((n & 1) == 0) {
		    n >>>= 1;
		} else if (n == 3 || Integer.bitCount(n + 1) > Integer.bitCount(n - 1)) {
		    --n;
		} else {
		    ++n;
		}
		++c;
	    }
	    return c;
	}
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		System.out.println(numberReplacement(n));
	}
}



back end test cases
case = 1
input = 100
output = 8

case = 2
input = 50
output = 7


case = 3
input = 289
output = 10

case = 4
input = 1
output = 0




Program-2

write a program to print the following pattern 

input = 10
output =
1
4 9 16
25 36 49 64 81
100 121 144 169 196 225 256
289 324 361 400 441 484 529 576 625
676 729 784 841 900 961 1024 1089 1156 1225 1296
1369 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401
2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969 4096
4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561
6724 6889 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 10000



input = 13
output = 
1
4 9 16
25 36 49 64 81
100 121 144 169 196 225 256
289 324 361 400 441 484 529 576 625
676 729 784 841 900 961 1024 1089 1156 1225 1296
1369 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401
2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969 4096
4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561
6724 6889 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 10000
10201 10404 10609 10816 11025 11236 11449 11664 11881 12100 12321 12544 12769 12996 13225 13456 13689 13924 14161 14400 14641
14884 15129 15376 15625 15876 16129 16384 16641 16900 17161 17424 17689 17956 18225 18496 18769 19044 19321 19600 19881 20164 20449 20736
21025 21316 21609 21904 22201 22500 22801 23104 23409 23716 24025 24336 24649 24964 25281 25600 25921 26244 26569 26896 27225 27556 27889 28224 28561




back end test cases

case = 1
input = 15
output = 
1
4 9 16
25 36 49 64 81
100 121 144 169 196 225 256
289 324 361 400 441 484 529 576 625
676 729 784 841 900 961 1024 1089 1156 1225 1296
1369 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401
2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969 4096
4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561
6724 6889 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 10000
10201 10404 10609 10816 11025 11236 11449 11664 11881 12100 12321 12544 12769 12996 13225 13456 13689 13924 14161 14400 14641
14884 15129 15376 15625 15876 16129 16384 16641 16900 17161 17424 17689 17956 18225 18496 18769 19044 19321 19600 19881 20164 20449 20736
21025 21316 21609 21904 22201 22500 22801 23104 23409 23716 24025 24336 24649 24964 25281 25600 25921 26244 26569 26896 27225 27556 27889 28224 28561
28900 29241 29584 29929 30276 30625 30976 31329 31684 32041 32400 32761 33124 33489 33856 34225 34596 34969 35344 35721 36100 36481 36864 37249 37636 38025 38416
38809 39204 39601 40000 40401 40804 41209 41616 42025 42436 42849 43264 43681 44100 44521 44944 45369 45796 46225 46656 47089 47524 47961 48400 48841 49284 49729 50176 50625


case = 2
input = 1
output = 1

case = 3
input = 20
output =
1
4 9 16
25 36 49 64 81
100 121 144 169 196 225 256
289 324 361 400 441 484 529 576 625
676 729 784 841 900 961 1024 1089 1156 1225 1296
1369 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401
2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969 4096
4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561
6724 6889 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 10000
10201 10404 10609 10816 11025 11236 11449 11664 11881 12100 12321 12544 12769 12996 13225 13456 13689 13924 14161 14400 14641
14884 15129 15376 15625 15876 16129 16384 16641 16900 17161 17424 17689 17956 18225 18496 18769 19044 19321 19600 19881 20164 20449 20736
21025 21316 21609 21904 22201 22500 22801 23104 23409 23716 24025 24336 24649 24964 25281 25600 25921 26244 26569 26896 27225 27556 27889 28224 28561
28900 29241 29584 29929 30276 30625 30976 31329 31684 32041 32400 32761 33124 33489 33856 34225 34596 34969 35344 35721 36100 36481 36864 37249 37636 38025 38416
38809 39204 39601 40000 40401 40804 41209 41616 42025 42436 42849 43264 43681 44100 44521 44944 45369 45796 46225 46656 47089 47524 47961 48400 48841 49284 49729 50176 50625
51076 51529 51984 52441 52900 53361 53824 54289 54756 55225 55696 56169 56644 57121 57600 58081 58564 59049 59536 60025 60516 61009 61504 62001 62500 63001 63504 64009 64516 65025 65536
66049 66564 67081 67600 68121 68644 69169 69696 70225 70756 71289 71824 72361 72900 73441 73984 74529 75076 75625 76176 76729 77284 77841 78400 78961 79524 80089 80656 81225 81796 82369 82944 83521
84100 84681 85264 85849 86436 87025 87616 88209 88804 89401 90000 90601 91204 91809 92416 93025 93636 94249 94864 95481 96100 96721 97344 97969 98596 99225 99856 100489 101124 101761 102400 103041 103684 104329 104976
105625 106276 106929 107584 108241 108900 109561 110224 110889 111556 112225 112896 113569 114244 114921 115600 116281 116964 117649 118336 119025 119716 120409 121104 121801 122500 123201 123904 124609 125316 126025 126736 127449 128164 128881 129600 130321
131044 131769 132496 133225 133956 134689 135424 136161 136900 137641 138384 139129 139876 140625 141376 142129 142884 143641 144400 145161 145924 146689 147456 148225 148996 149769 150544 151321 152100 152881 153664 154449 155236 156025 156816 157609 158404 159201 160000


case = 4
input = 5
output = 
1
4 9 16
25 36 49 64 81
100 121 144 169 196 225 256
289 324 361 400 441 484 529 576 625



Program-3

Given two dates (can be of different years), 
calculate the number of days between them (taking care of leap years).


input =
20-09-2018
30-10-2018
output =
11

Explanation 
20,21,22,23,24,25,26,27,28,29,30- Total 11 days


input = 
30-09-2018
01-10-2018
output = 
2


input = 
01-01-2018
31-12-2018
output =
365


input = 
31-12-2017
01-01-2018
output =
2



back end test cases
case = 1
input =
20-09-2018
30-10-2018
output = 11


case = 2
input = 
30-09-2018
01-10-2018
output = 2

case = 3
input = 
01-01-2018
31-12-2018
output = 365


case = 4
input = 
31-12-2017
01-01-2018
output = 2



case = 5
input = 
35-12-2017
01-01-2018
output = -1

case = 6
input = 
30-16-2017
01-01-2018
output = -1


case = 7
input = 
input = 
31-12-2018
01-01-2017
output = -1

import java.util.Scanner;
import java.util.HashMap;

class DateTest {
    int day;
    int month;
    int year;
    static HashMap<Integer, Integer> days = new HashMap<>();
    static {
        days.put(1, 31);
        days.put(2, 28);
        days.put(3, 31);
        days.put(4, 30);
        days.put(5, 31);
        days.put(6, 30);
        days.put(7, 31);
        days.put(8, 31);
        days.put(9, 30);
        days.put(10, 31);
        days.put(11, 30);
        days.put(12, 31);
    }
    DateTest(int day, int month, int year) {
        this.day = day;
        this.month = month;
        this.year = year;
    }
    
    int difference(DateTest d) {
        int diff = 0;
        for (int i = this.year + 1; i <= d.year-1; i++) {
            if (i % 4 == 0) {
                if (i % 100 == 0) {
                    if (i % 400 == 0) {
                        diff += 366;
                    } else {
                        diff += 365;
                    }
                } else {
                    diff += 366;
                }
            } else {
                diff += 365;
            }
        } 
        if (this.year != d.year) {
            for (int i = this.month + 1; i <= 12; i++) {
                diff += days.get(i);
            }
            for (int i = 1; i <= d.month - 1; i++) {
                diff += days.get(i);
            }   
        } else {
            for (int i = this.month + 1; i <= d.month - 1; i++) {
                diff += days.get(i);
            }
        }
        if (this.month != d.month) {
            diff += days.get(this.month) - this.day + 1;
            diff += d.day - 1 + 1;
        } else {
            diff += d.day - this.day + 1;
        }
        return diff;
    }
}
class Test {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        String date1 = s.next();
        String date2 = s.next();
        String[] date1_split = date1.split("-");
        String[] date2_split = date2.split("-");
        DateTest d1 = new DateTest(Integer.parseInt(date1_split[0]), Integer.parseInt(date1_split[1]), Integer.parseInt(date1_split[2]));
        DateTest d2 = new DateTest(Integer.parseInt(date2_split[0]), Integer.parseInt(date2_split[1]), Integer.parseInt(date2_split[2]));
        
        System.out.println(d1.difference(d2));
    }
    
}