Program-1

Given a 6x6  2D Array, :

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

We define an hourglass in A to be a subset of values with indices falling in this pattern in arr's graphical representation:

a b c
  d
e f g

There are 16 hourglasses in arr, and an hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in arr, then print the maximum hourglass sum.

For example, given the 2D array:

-9 -9 -9  1 1 1 
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0

We calculate the following  hourglass values:

-63, -34, -9, 12, 
-10, 0, 28, 23, 
-27, -11, -2, 10, 
9, 17, 25, 18

Our highest hourglass value is 28 from the hourglass:

0 4 3
  1
8 6 6

output:  It should return an integer, the maximum hourglass sum in the array.


Constraints
-9<=arr[i][j]<=9
0<=i,j<=5

Output Format

Print the largest (maximum) hourglass sum found in arr.

input =
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
output = 19

Explanation
contains the following hourglasses:

1 1 1  1 1 0  1 0 0  0 0 0
  1      0      0      0
1 1 1  1 1 0  1 0 0  0 0 0

0 1 0  1 0 0  0 0 0  0 0 0
  1      1      0      0
0 0 2  0 2 4  2 4 4  4 4 0

1 1 1  1 1 0  1 0 0  0 0 0
  0      2      4      4
0 0 0  0 0 2  0 2 0  2 0 0

0 0 2  0 2 4  2 4 4  4 4 0
  0      0      2      0
0 0 1  0 1 2  1 2 4  2 4 0

The hourglass with the maximum sum (19) is:

2 4 4
  2
1 2 4

so output is 19



Program-2

There is a collection of input strings and a collection of query strings. For each query string, determine how many times it occurs in the list of input strings.

For example, given input strings =[ab,ab, abc] and queries =[ab,abc,bc], we find  2 instances of ab', 1 of 'abc' and 0 of 'bc'. For each query, we add an element to our return array, results =[2,1,0] .


 output should return the frequency of occurrence of each query string in strings.

matchingStrings has the following parameters:

strings - an array of strings to search
queries - an array of query strings

Input Format
The first line contains and integer n, the size of strings.
Each of the next n lines contains a string strings[i].
The next line contains q, the size of queries.
Each of the next q lines contains a string q[i].

output
Return an integer array of the results of all queries in order.

input =
4
aba
baba
aba
xzxb
3
aba
xzxb
ab
output =
2 
1 
0

strings {aba,baba,aba,xzxb}
queries {aba,xzxb,ab}

Explanation 1

Here, "aba" occurs twice, in the first and third string. The string "xzxb" occurs once in the fourth string, and "ab" does not occur at all.


case = 2
input =
3
def
de
fgh
3
de
lmn
fgh
output =
1
0
1

strings {def,de,fgh}
queries {de, lmn, fgh}


input =
13
abcde
sdaklfj
asdjf
na
basdn
sdaklfj
asdjf
na
asdjf
na
basdn
sdaklfj
asdjf
5
abcde
sdaklfj
asdjf
na
basdn
output =
1
3
4
3
2

strings { abcde,sdaklfj,asdjf,na,basdn,sdaklfj,
asdjf,na,asdjf,na,basdn,sdaklfj,asdjf }
queries {abcde,sdaklfj,asdjf,na,basdn}


Program-3

Extra Long Factorials

The factorial of the integer n, written n!, is defined as
n!=n*(n-1)*(n-2)*(n-3)*......1

calculate and print the factorial of a given positive integer.
Note: for other boundary conditions print -1.
for example:
if n=30 we calculate 30*29*28*....3*2*1=265252859812191058636308480000000.

input =
30
output =
265252859812191058636308480000000


input =
25
output =
15511210043330985984000000


//backend testcases:
case = 1
input =
32
output =
263130836933693530167218012160000000

case = 2
input =
15
output =
1307674368000

case = 3
input = -5
output = -1

case = 4
input = 3
output =
6

case = 5
input = 1
output = 1

case = 6
input =50
output =30414093201713378043612608166064768844377641568960512000000000000

 