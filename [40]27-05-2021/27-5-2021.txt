Program-1

Ramu is given a group of numbers, his Maths Teacher gave him the following rule. 

Rule 1 - find the subsequence in which the difference between two numbers is constant . 
Rule 2 - the length of those subsequence should be maximum among other subsequences 

Print the length of those subsequence which is maximum 


The first line of input consists of group size followed by group elements


Example 1:

input  = 4 
3 6 9 12
output = 4

Explanation:
The difference between two numbers is constant(3) the subsequence is [3 6 9 12] whose length is 4 



Example 2:

input = 5
9 4 7 2 10
output = 3

Explanation:
The difference between two numbers is constant(3) the subsequence is [4 7 10] whose length is 3  




import java.util.*;

class ArithSeq {
    public int longestArithSeqLength(int[] A) {
        int n = A.length, ans = 0;
        int[][] dp = new int[n][n];
        int[] last = new int[1001];
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                int prev = (A[i] << 1) - A[j];
                if(prev >= 0 && last[prev] != 0) {
                    dp[i][j] = dp[last[prev] - 1][i] + 1;
                    ans = Math.max(ans, dp[i][j]);
                }
            }
            last[A[i]] = i+1;
        }
        return ans + 2;
    }
	
	public static void main(String args[])
	{
		Scanner sc= new Scanner(System.in);
		int n=sc.nextInt();
		int nums[]=new int[n]; 
		for(int i=0;i<n;i++)
			nums[i]=sc.nextInt();
		System.out.println(new ArithSeq().longestArithSeqLength(nums));
	}
}


back end test cases

case = 1
input = 7
20 1 15 3 10 5 8
output = 4

case = 2
input = 10
3 4 1 9 8 7 3 4 9 10
output = 3


case = 3
input = 25
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
output = 25

case = 4
input = 15
5 10 15 20 25 10 20 30 40 50 60 2 4 6 8
output = 6



Program-2

Prasad is working on patterns.
He is given a pattern P of length N-1, He needs to construct a list L[] of length N.

And the list L[] has to construct using the integers from 1 to N only.

To construct the list, He defined a rule set as follows based on the pattern P:
	- if P[i] == 'A', then L[i] < L[i+1].
	- if P[i] == 'D', then L[i] > L[i+1].
	- And the L[] should be lexicographically smallest.

You will be given the pattern P of length N-1 
Your task is to construct the list using the pattern and 
according to the rules set by Prasad


Input Format:
-------------
A string, the pattern consist of only A and D alphabets.

Output Format:
--------------
Print the list, according to the given pattern.


Sample Input-1:
---------------
DAA

Sample Output-1:
----------------
[2, 1, 3, 4]

Explanation:
------------
Using the sequence DAA there are more than one way of creating the list:
for example: [2,1,3,4], [3,1,2,4], [4,1,2,3].
According to the given info, the result should be lexicographically smallest.
So the answer is [2,1,3,4].


Sample Input-2:
---------------
ADA

Sample Output-2:
----------------
[1, 3, 2, 4]

Explanation:
------------
Using the sequence ADA there are more than one way of creating the list:
for example: [1,3,2,4], [1,4,2,3], [2,4,1,3], [2,3,1,4]..etc
According to the given info, the result should be lexicographically smallest.
So the answer is [1,3,2,4].




import java.util.*;

public class FindPermutation {
    public int[] findPermutation(String s) {
        int n = s.length(), arr[] = new int[n + 1]; 
        for (int i = 0; i <= n; i++) arr[i] = i + 1; // sorted
        for (int h = 0; h < n; h++) {
            if (s.charAt(h) == 'D') {
                int l = h;
                while (h < n && s.charAt(h) == 'D') h++;
                reverse(arr, l, h); 
            }   
        }   
        return arr;
    }   

    void reverse(int[] arr, int l, int h) {
        while (l < h) {
            arr[l] ^= arr[h];
            arr[h] ^= arr[l];
            arr[l] ^= arr[h];
            l++; h--;
        }   
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String s = sc.next();
		System.out.println(Arrays.toString(new FindPermutation().findPermutation(s)));
	}
}
	


back end test cases


case =1
input =DDADADADADADA
output =[3, 2, 1, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 14]

case =2
input =DAA
output =[2, 1, 3, 4]

case =3
input =ADA
output =[1, 3, 2, 4]

case =4
input =ADADDDADADDDDADADDA
output =[1, 3, 2, 7, 6, 5, 4, 9, 8, 14, 13, 12, 11, 10, 16, 15, 19, 18, 17, 20]