Program-1


Sundeep is working with integer sets.
He is given a set of integers nums[], consist of positive integers.
You have to find a subsequence of integet set nums[], where the sum of elements
is equal to the sum of the rest of the elements.

Check whether you are able to split the entire set nums[], into two subsequences
where the two subsequences never share the elements from same index.

If it is possible to split, print true.
otherwise print false.

Input Format:
-------------
Line-1: An integer N.
Line-2: N space separated integers, List[]

Output Format:
--------------
Print an integer output, the highest product.


Sample Input-1:
---------------
4
4 2 8 6

Sample Output-1:
----------------
true

Explanation:
----------
[4,6] and [2,8] sum of both the sets equal to 10.


Sample Input-2:
---------------
5
2 3 4 5 8

Sample Output-2:
----------------
false



import java.util.*;

class EqualPartitions {
    public boolean canPartition(int[] nums) {
        if (nums.length == 0)
            return false;
        int totalSum = 0;
        // find sum of all array elements
        for (int num : nums) {
            totalSum += num;
        }
        // if totalSum is odd, it cannot be partitioned into equal sum subset
        if (totalSum % 2 != 0) return false;
        int subSetSum = totalSum / 2;
        boolean dp[] = new boolean[subSetSum + 1];
        dp[0] = true;
        for (int curr : nums) {
            for (int j = subSetSum; j >= curr; j--) {
                dp[j] |= dp[j - curr];
            }
        }
        return dp[subSetSum];
    }

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int[] arr=new int[N];
		for(int i=0;i<N;i++)
			arr[i]=sc.nextInt();
		System.out.println(new EqualPartitions().canPartition(arr));
	}
}





back end test cases

case =1
input =4
4 2 8 6
output =true

case =2
input =5
2 3 4 5 9
output =false

case =3
input =10
120 107 56 50 15 44 92 66 66 46
output =true

case =4
input =10
79 24 71 47 20 106 39 121 36 58
output =false

case =5
input =20
19 69 72 86 84 47 92 35 40 27 104 111 36 60 78 33 99 35 82 68
output =false











Program-2


Shanmukha creating a special strings.
A string is said to be a special string, if all the letters appeared 
even number of times, or only one letter appeared odd number of times.

For example: "adda" and "iaaff" are special strings.
but "iaf" is not a special string.

You are given a word W, where W conatins the letters from a to j.
Our task is to findout, the number of non-empty special strings, 
which are substrings of word W can be formed.
if a substring appeared more than once, count each appearance separately.

NOTE: subsequences are not allowed.

Input Format:
-------------
A String W, the word.

Output Format:
--------------
Print an integer, number of special strings.


Sample Input-1:
---------------
egg

Sample Output-1:
----------------
5

Explanation:
------------
The special strings formed from the word "egg" are:
'e'gg, e'g'g, eg'g', e'gg', 'egg'.


Sample Input-2:
---------------
bajaj

Sample Output-2:
----------------
9

Explanation:
------------
The special strings formed from the word "bajaj" are:
'b'ajaj, b'a'jaj, baj'a'j, ba'j'aj, baja'j', b'aja'j, ba'jaj', b'ajaj', 'bajaj'.



import java.util.*;
class WonderfulSubstrings {
	public long wonderfulSubstrings(String word) {
		long cnt[] = new long[1024], res = 0;
		int mask = 0;
		cnt[0] = 1;
		for (char ch : word.toCharArray()) {
			mask ^= 1 << (ch - 'a');
			res += cnt[mask];
			for (int n = 0; n < 10; ++n)
				res += cnt[mask ^ (1 << n)];
			++cnt[mask];
		}
		return res;
	}

	public static void main(String args[] ) {
		Scanner sc = new Scanner(System.in);
		String n=sc.next();
		System.out.println(new WonderfulSubstrings().wonderfulSubstrings(n));
	}
}






back end test cases

case =1
input =bajaj
output =9

case =2
input =egg
output =5

case =3
input =ahjjjhajhhahah
output =55

case =4
input =abcdefghijijhfgebcda
output =42

case =5
input =iahaidajaidihhahhhhiiigiighihgghhi
output =184

