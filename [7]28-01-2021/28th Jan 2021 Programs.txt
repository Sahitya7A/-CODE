Program1

write a program to read a string in HH:MM:SS:AM/PM format 
and produce the input string in 24 Hour Format 

Input- the string is in 12- hour AM/PM format
Output - the input string should be in 24-hour format

Assume all HH,MM,SS are in the valid range only 

Note: Midnight is 12:00:00AM on a 12-hour clock,  and 00:00:00 on a 24-hour clock. 
Noon is 12:00:00PM on a 12-hour clock,  and 12:00:00 on a 24-hour clock. 
     
 Assume all input times are valid
    
input = 06:10:20PM
output = 18:10:20

input = 01:45:50PM
output = 13:45:50

input = 10:05:30AM
output = 10:05:30

input = 12:30:45AM
output = 00:30:45

input = 02:13:19AM
output = 02:13:19
    
import java.util.*;
class Test
{ 
public static void printTime24Format(String str) 
{ 
	int hours = (Integer.parseInt(""+str.charAt(0)) * 10) + (Integer.parseInt(""+str.charAt(1)) % 10); 
	if (str.contains("AM"))
	{ 
		if (hours == 12) 
			System.out.print("00"+str.substring(2,8));	
		else
			System.out.print(str.substring(0,8));		
	} 
else
	{ 
		if (hours == 12) 
		  System.out.print("12"+str.substring(2,8)); 
		else
		 System.out.print((hours+12)+str.substring(2,8)); 
       } 
} 
public static void main (String[] args) 
{ 
	Scanner sc=new Scanner(System.in);
	String str = sc.next();
	printTime24Format(str); 
} 
} 






back end test cases

case = 1
input = 07:05:45PM
output = 19:05:45

case = 2
input = 01:45:50PM
output = 13:45:50

case = 3
input = 10:05:30AM
output = 10:05:30

case = 4
input = 01:20:40AM
output = 01:20:40

case = 5
input = 12:30:45AM
output = 00:30:45



Program2


Given an array of integers, 
return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. 
In other words, you want to choose a subarray and optionally delete one element from it 
so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.

Example 1:

Input: arr = [1,-2,0,3]
Output: 4

Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3]
becomes the maximum value.

Example 2:
Input: arr = [1,-2,-2,3]
Output: 3

Explanation: We just choose [3] and it's the maximum sum.

Example 3:
Input: arr = [-1,-1,-1,-1]
Output: -1

Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1
from it, then get an empty subarray to make the sum equals to 0.

import java.util.*;

class MaximumSum {
    public int maximumSum(int[] arr) {
        if(arr.length == 1) return arr[0];
        int n = arr.length;
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        
        dp1[0] = arr[0];
        dp2[n-1] = arr[n-1];
        int max = arr[0];
        
        for(int i=1; i<n; i++){
            dp1[i] = dp1[i-1] > 0 ? dp1[i-1] + arr[i] : arr[i];
            max = Math.max(max, dp1[i]);
        }
        for(int i=n-2; i>=0; i--){
            dp2[i] = dp2[i+1] > 0 ? dp2[i+1] + arr[i] : arr[i];
        }
        
        for(int i=1; i<n-1; i++){ 
            if(arr[i] < 0){
                max = Math.max(max, dp1[i-1] + dp2[i+1]); 
            }
        }
        return max;
    }
	
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		String[] str = sc.nextLine().split(" ");
		int[] array = Arrays.asList(str).stream().mapToInt(Integer::parseInt).toArray();
		System.out.println(new MaximumSum().maximumSum(array));
	}
}




back end test cases
case = 1
input =1 2 0 3
output = 6

case = 2
input =1 2 3
output = 6

case = 3
input =8 -7 -3 1 9 2 -8
output = 17

case = 4
input =1 2 -9 -8 3 4 -5 6 7 8
output = 28

case = 5
input =1 2 3 4 3 2 1
output = 16


Program3

Write a Java program to check if a sentence is a palindrome or not

If Palindrome print true else print false

We know a string is Palindrome if it is the same reading from both sides.
Now you have to check if a string is palindrome or not

Note - Assume the input line  here is not case sensitive
ignore the special symbols,spaces and compare only the characters and print true or false


input =a man a plan a canal panama
output = 1

in the above  example first character is 'a' last character is 'a'
second character is 'm' last second character is 'm' and comparing so on all characters should be equal


input =do nine men interpret nine men i nod
output = true

input =Red rum, sir, is murder
output = true 

input = Was it a cat I saw?
output = true

input =Eva,   can I s e e b^% e e s i n a ca;;;ve?
output = true 

input =No lemon, no melon
output = true 


import java.util.*;
class Test
{
public static void checkSentencePalindrome(String str) 
	{	 
		int i = 0;
		int k = str.length()-1; 
		str = str.toLowerCase();	
		while(i <= k) 
		{ 
			if (!(str.charAt(i)  >= 'a' && str.charAt(i) <= 'z')) 
				i+=1 ;
			else if(!(str.charAt(k) >= 'a' && str.charAt(k) <= 'z')) 
				k-=1; 
			else if( str.charAt(i) == str.charAt(k)) 
			{ 
				i+=1; 
				k-=1; 
			} 
			else
			{
				System.out.print(false);
			        return;
			}
		} 
				System.out.print(true);
	} 
	public static void main(String[] args) 
	{ 
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		checkSentencePalindrome(str);
	} 
}


back end test cases

case =1
input =sir iM iriS
output = true

case = 2
input =no it i&s oPose*d art see's trade;s opposition
output = false

case = 3
input =slang is NOt suet is it euston signals; ; ;
output = true

case = 4
input =was it a car or a CaT i Saw
output = true

case = 5
input =Step on no pets
output = true

case = 6
input =T o p s p o t
output = true


