Program-1



Mounika is creating the binary strings using P 1's and Q 0's.
A binary string contains only 0's and 1's.
She has given a list of binary strings binStr[] to be formed.

Her task is to find, the maximum number of binary strings can be formed, 
with given P 1's and Q 0's only. She cannot use any more 1's or 0's.

Input Format:
-------------
Line-1 -> A single line of space separated binary strings, binStr[].
Line-2 -> Two integers P and Q, P number of 1's and Q number of 0's


Output Format:
--------------
Print an integer as output, maximum number of binary strings can be formed.


Sample Input-1:
---------------
10 0001 111001 1 0
3 5

Sample Output-1:
----------------
4

Explanation:
------------
She can form 4 strings by the using of 3 1's and 5 0's
strings are 10, 0001, 1, 0.


Sample Input-2:
---------------
10 1 0
1 1

Sample Output-2:
----------------
2

Explanation:
------------
She can form 2 strings by the using of 1 1's and 1 0's
strings are 1, 0.



case =1
input =10 0001 111001 1 0
3 5
output =4

case =2
input =10 100 1000 10000 100000 1000000 11 10 101 10010 101001 1001001
10 10
output =6

case =3
input =10 0 1
1 1
output =2

case =4
input =010 1010 001 100 0101 101 1100 0011 000 001 010 011 110 111 10101 10110 01110 10011
20 18
output =11

/*
import java.util.*;
 class Test{
	static int c0, c1;
     public static void count01(String s){
		 c0 = c1 = 0;
         for(int i=0;i<s.length();i++){
             if(s.charAt(i)=='0'){
                 c0 +=1;
             }
			 else if(s.charAt(i)=='1'){
                 c1 +=1;
             }
         }
     }

     public static void main(String[] args){
         Scanner sc=new Scanner(System.in);
         String s=sc.nextLine();
        int p=sc.nextInt();
         int q=sc.nextInt();
         String[] s1=s.split(" ");
         int i,j;
         for(i=0;i<s1.length;i++){
            for(j=1;j<s1.length-i;j++){
                 if(s1[j-1].length()>s1[j].length()){
                     String temp=s1[j-1];
                    s1[j-1]=s1[j];
                     s1[j]=temp;
                 }
            }
         }


         int count=0;
         for(i=0;i<s1.length;i++){
             count01(s1[i]);
             System.out.println(s1[i]+" "+c0+" "+c1 + " " + p + " " + q);
             if(c1<=p && c0<=q
*/


import java.util.*;

class BinaryStrings {
	public int findMaxForm(String[] strs, int m, int n) {
		int[][] dp = new int[m+1][n+1];
		for (String s : strs) {
			int[] count = count(s);
			for (int i=m;i>=count[0];i--) 
				for (int j=n;j>=count[1];j--) 
					dp[i][j] = Math.max(1 + dp[i-count[0]][j-count[1]], dp[i][j]);
		}
		return dp[m][n];
	}
		
	public int[] count(String str) {
		int[] res = new int[2];
		for (int i=0;i<str.length();i++)
			res[str.charAt(i) - '0']++;
		return res;
	}
	
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		String str[]=sc.nextLine().split(" ");
		int Q=sc.nextInt();
		int P=sc.nextInt();
		System.out.println(new BinaryStrings().findMaxForm(str, P, Q));
	}
}




Program-2

You are playing a shooting game.
There are N bottles hanging to a rod, i-th bottle numbered bottle[i].

If you shoot i-th bottle, you will get bottle[i-1]*bottle[i]*bottle[i+1] points.
The more points you score, the more rewards you can win.

Your task is to score the maximum points by shooting all the ballons wisely.

Note: After you shoot bottle at i-th index, bottles at i-1 and i+1 positions
become adjacent. if there is no existing 'i-1' or 'i+1' positions for selected bottle.
you can assume that bottle[i-1] = bottle[i+1] = 1.

Input Format:
-------------
N space separated integers bottles[].

Output Format:
--------------
Print an integer, maximum points you can get.


Sample Input:
---------------
3 1 5 8

Sample Output:
----------------
167

Explanation:
------------
Given bottles = [3, 1, 5, 8] 
position 	points
--------------------
1				3*1*5
5				3*5*8
3				1*3*8
8				1*8*1
--------------------
Total = 167


import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class BurstBalloons {
	//DP SOLUTION
    public int maxCoins(int[] iNums) {
		int[] nums = new int[iNums.length + 2];
		int n = 1;
		for (int x : iNums) if (x > 0) nums[n++] = x;
		nums[0] = nums[n++] = 1;


		int[][] dp = new int[n][n];
		for (int k = 2; k < n; ++k)
			for (int left = 0; left < n - k; ++left) {
				int right = left + k;
				for (int i = left + 1; i < right; ++i)
					dp[left][right] = Math.max(dp[left][right], 
					nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]);
			}

		return dp[0][n - 1];
	}

	public static void main(String args[] ) throws IOException {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String str = br.readLine();
		String[] numberline = str.split(" ");
		int[] nums = Arrays.asList(numberline).stream().mapToInt(Integer::parseInt).toArray();
		System.out.print( new BurstBalloons().maxCoins(nums));   
	}
}



case =1
input =3 1 5 8
output =167

case =2
input =49 9 11 4 43
output =32076

case =3
input =2 1 3 5 4
output =102

case =4
input =7 8 2 4 9 11 13 2 17
output =7220







Program-3

Pramod is planning to design a program, which helps to create 
the IP addresses posssible from a given string S, 
where each IP address should be valid.

It is guaranteed that S contains only digits.

Can you help pramod in designing such program, which returns all possible IP addresses.
Print the answer in lexicographic order.

NOTE:
-----

- A valid IP address consists of exactly four integers, 
each integer is between 0 and 255, separated by single dots 
and cannot have leading zeros
- IP Addresses are said to be valid if it falls in the range 
from 0.0.0.0 to 255.255.255.255

- IP addresses like [123.012.234.255 , 123.234.345.34] are invalid.

Input Format:
-------------
A string S, contains only digits [0-9].

Output Format:
--------------
Print all possible IP addresses which are valid.


Sample Input-1:
---------------
23323311123

Sample Output-1:
----------------
[233.233.11.123, 233.233.111.23]


Sample Input-2:
---------------
12345678

Sample Output-2:
----------------
[1.234.56.78, 12.34.56.78, 123.4.56.78, 123.45.6.78, 123.45.67.8]


Sample Input-3:
---------------
02550255

Sample Output-3:
----------------
[0.25.50.255, 0.255.0.255]


back end test cases
case =1
input =255255255255
output =[255.255.255.255]

case =2
input =112123234
output =[1.12.123.234, 1.121.23.234, 1.121.232.34, 11.2.123.234, 11.21.23.234, 11.21.232.34, 11.212.3.234, 11.212.32.34, 112.1.23.234, 112.1.232.34, 112.12.3.234, 112.12.32.34, 112.123.2.34, 112.123.23.4]

case =3
input =23323311123
output =[233.233.11.123, 233.233.111.23]

case =4
input =123456
output =[1.2.34.56, 1.23.4.56, 1.23.45.6, 1.234.5.6, 12.3.4.56, 12.3.45.6, 12.34.5.6, 123.4.5.6]


import java.util.*;

public class RestoreIpAddress {

	int n;
	  String s;
	  LinkedList<String> segments = new LinkedList<String>();
	  ArrayList<String> output = new ArrayList<String>();

	  public boolean valid(String segment) {
	    /*
	    Check if the current segment is valid :
	    1. less or equal to 255      
	    2. the first character could be '0' 
	    only if the segment is equal to '0'
	    */
	    int m = segment.length();
	    if (m > 3)
	      return false;
	    return (segment.charAt(0) != '0') ? (Integer.valueOf(segment) <= 255) : (m == 1);
	  }

	  public void update_output(int curr_pos) {
	    /*
	    Append the current list of segments 
	    to the list of solutions
	    */
	    String segment = s.substring(curr_pos + 1, n);
	    if (valid(segment)) {
	      segments.add(segment);
	      output.add(String.join(".", segments));
	      segments.removeLast();
	    }
	  }

	  public void backtrack(int prev_pos, int dots) {
	    /*
	    prev_pos : the position of the previously placed dot
	    dots : number of dots to place
	    */
	    // The current dot curr_pos could be placed 
	    // in a range from prev_pos + 1 to prev_pos + 4.
	    // The dot couldn't be placed 
	    // after the last character in the string.
	    int max_pos = Math.min(n - 1, prev_pos + 4);
	    for (int curr_pos = prev_pos + 1; curr_pos < max_pos; curr_pos++) {
	      String segment = s.substring(prev_pos + 1, curr_pos + 1);
	      if (valid(segment)) {
	        segments.add(segment);  // place dot
	        if (dots - 1 == 0)      // if all 3 dots are placed
	          update_output(curr_pos);  // add the solution to output
	        else
	          backtrack(curr_pos, dots - 1);  // continue to place dots
	        segments.removeLast();  // remove the last placed dot 
	      }
	    }
	  }

	  public List<String> restoreIpAddresses(String s) {
	    n = s.length();
	    this.s = s;
	    backtrack(-1, 3);
		Collections.sort(output);
	    return output;
	  }
	  

	  public static void main(String args[] ) {
			    Scanner sc = new Scanner(System.in);
				String str=sc.next();
				RestoreIpAddress ria=new RestoreIpAddress();
			    System.out.println(ria.restoreIpAddresses(str));
		}
}

import java.util.*;
 class Test{
	static int c0, c1;
     public static void count01(String s){
		 c0 = c1 = 0;
         for(int i=0;i<s.length();i++){
             if(s.charAt(i)=='0'){
                 c0 +=1;
             }
			 else if(s.charAt(i)=='1'){
                 c1 +=1;
             }
         }
     }

     public static void main(String[] args){
         Scanner sc=new Scanner(System.in);
         String s=sc.nextLine();
        int p=sc.nextInt();
         int q=sc.nextInt();
         String[] s1=s.split(" ");
         int i,j;
         for(i=0;i<s1.length;i++){
            for(j=1;j<s1.length-i;j++){
                 if(s1[j-1].length()>s1[j].length()){
                     String temp=s1[j-1];
                    s1[j-1]=s1[j];
                     s1[j]=temp;
                 }
            }
         }


         int count=0;
         for(i=0;i<s1.length;i++){
             count01(s1[i]);
             System.out.println(s1[i]+" "+c0+" "+c1 + " " + p + " " + q);
             if(c1<=p && c0<=q
NEIL GOGTE: Program 3
NEIL GOGTE: import java.util.*;
class subSequece{
     public static int subseq(String ss,String ts){
     int res= 0;
     int i=0;
     char[] source=ss.toCharArray();
     char[] target=ts.toCharArray();
     while(i<ts.length()){
         boolean exists = false;
         for (int j=0; j<ss.length();j++){
             if (i<ts.length() && source[j]==target[i]) {
                exists = true;
                 i++;
             }
        }
		 if(!exists) return -1;
		 res++;
     }
     return res;
 }  
     public static void main(String[] args){
         Scanner s=new Scanner(System.in);
         String s1=s.next();
         String s2=s.next();
         System.out.println(new subSequece().subseq(s1,s2));
     }
 }
