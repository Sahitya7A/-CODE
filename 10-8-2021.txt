1)what will happen if in a  C Program you assign a value to an array element whose subscript exceeds the size of array ?

A) The element will be set to 0
B) The compiler would report an error
C) The program may crash if some important data gers overwritten
D) The array size would appropriately grow,



Ans-C


2) Which bitwise operator is suitable for turning off a particular bit in a number ?

A) && operator
B) || operator
C) & operator
D) ! operator



Ans- C



3)
In which stage the following code 
#include<stdio.h>
gets replaced by the contents of the file stdio.h

A) During editing
B) During linking
C) During execution
D) During preprocessing



Ans-D



4)
What will be the output of the program?

#include<stdio.h>

int main() {
int i=4,j=8;
printf(" %d %d %d",i|j&j|i,i|j&j|i,i^j);
return 0;
}

A) 12,12,12
B) 112,1,12
C) 32,1,12
D) 64,1,12

Ans-A




5)what are the two main metrics to measure efficiency of an algorithm ?

A) Complexity and Capacity
B) Processor and Memory
C) Data and Space
D) Time and Space
E) It cannot be measured 

Ans-D


6) when will this line fail to compile ?

Test *ptr = new Test[100];

A) Never
B) When Test is too large to fit into memory
C) When Test has no default constructor
D) None of these


Ans-C




7) which of the following concepts menas waiting until runtime to determine which function to call ?

A) Data hiding
B) Dynamic casting
C) Dynamic binding
D) Dynamic loading



Ans-C




8) this 'pointer' is implicitly passed to

A) Class member functions
B) class static functions
C) global functions
D) Both Class member functions and class static functions


Ans-A


9)

import java.util.*;
class Test {
public static void main(String[] args) {
// insert code here
x.add("one");
x.add("two");
x.add("TWO");
System.out.println(x.poll());
}
}

Which, inserted at // insert code here, will compile? (Choose all that apply.)
A. List<String> x = new LinkedList<String>();
B. TreeSet<String> x = new TreeSet<String>();
C. HashSet<String> x = new HashSet<String>();
D. Queue<String> x = new PriorityQueue<String>();
E. ArrayList<String> x = new ArrayList<String>();
F. LinkedList<String> x = new LinkedList<String>();

Answer:
D and F are correct. 



10)

4. public class Frodo extends Hobbit {
5. public static void main(String[] args) {
6. Short myGold = 7;
7. System.out.println(countGold(myGold, 6));
8. }
9. }
10. class Hobbit {
11. static int countGold(int x, int y) { return x + y; }
12. }


What is the result?
A. 13
B. Compilation fails due to multiple errors
C. Compilation fails due to an error on line 6
D. Compilation fails due to an error on line 7
E. Compilation fails due to an error on line 11




Ans- A

Program1

In summer training camp, a course is divided into N sessions.

Each session handled by N different trainers, each trainer identified by an alphabet.

At the end of the course, the students are requested to give rating for each
trainer between 1 to N, each trainer should be assigned different rating.

For example, there are 3 trainers, I, J and K, the student can vote them as IJK,JKI, IKJ..etc. 
Where IJK means, trainer-I got rating-1, trainer-J got rating-2, trainer-K got rating-3.


You have to sort the trainers based on the rating they recieved.
The sorting of the trainers is as follows:
	- The sorting of the trainers is decided by who received the most ratings.
	- If the trainer recieved more 1-ratings, he is in first place, 
	- If two or more trainers tie in the first place, you have to consider 
	the second place to resolve the conflict, if they tie again, we continue
	this process until the ties are resolved.
	- If two or more trainers are still tied after considering all the places, 
	we sort them alphabetically based on the assigned letter.

You will be given an array of ratings by S students in the class. 
Your task is to sort the trainers according to the above rules, and return the
sorted list of N trainers as a string by the rating given to them.

Input Format:
-------------
Line-1: Two integers N and S, number of trainers, number of students.
Line-2: S space separated strings of length N, rating by the students.

Output Format:
--------------
Print a String output.


Sample Input-1:
---------------
3 6
JKI KIJ KJI IJK IKJ JIK

Sample Output-1:
----------------
IJK

Explanation:
------------
Trainer-I was rated first by 2 students, second by 2 students and third by 2 students.
Trainer-J was rated first by 2 students, second by 2 students and third by 2 students.
Trainer-K was rated first by 2 students, second by 2 students and third by 2 students.
There is a tie and you sort the trainers in ascending order by their IDs.


Sample Input-2:
---------------
4 2 
PQSR SQRP

Sample Output-2:
----------------
SPQR


Explanation:
------------
Trainer-P was rated first by 1 student, Trainer-S was rated first by 1 student, there is a tie
now in third place S got rated by one student, and P by none.
So, S occupies first place, then P occupies second-place, trainer-Q was rated by 2 students next,
so Q took third place, and ramaining trainer-R in the last place.


Sample Input-3:
---------------
1 4
K K K K

Sample Output-3:
----------------
K



case =1
input =4 8
BCAD ADCB ADBC BADC BCAD CADB CABD BCDA
output =BACD

case =2
input =26 2
QWERTYUIOPASDFGHJKLZXCVBNM NBVCXZMLKJHGFDSAYTREWQUIOP
output =QNWBEVRCTXYZUMLIKOJPAHGSDF

case =3
input =6 8
IKMNHY KHMNIY MNHKIY HKINMY MYIKHN INMHKY HKIYMN HNIMKY
output =HIMKNY

case =4
input =3 6
ABC BCA CAB CBA BAC ACB
output =ABC


import java.util.*;

class TeamRanks {
    public String rankTeams(String[] votes) {
        int[][] voteCount = new int[26][26]; // voteCount[0][0] means the number of votes of team `A` to become the first position
        for (String vote : votes) {
            for (int i = 0; i < vote.length(); i++) {
                char c = vote.charAt(i);
                voteCount[c-'A'][i]++; // voteCount[c-'A'][i] means the number of votes of team `c` to become the `ith` position
            }
        }
        char[] ans = votes[0].toCharArray();
        Character[] tmp = new Character[ans.length];
        for (int i = 0; i < ans.length; i++) tmp[i] = ans[i];
        Arrays.sort(tmp, (t1, t2) -> {
            for (int i = 0; i < 26; i++)
                if (voteCount[t1-'A'][i] != voteCount[t2-'A'][i]) // If team1 and team2 don't tie on the `ith` position
                    return voteCount[t2-'A'][i] - voteCount[t1-'A'][i]; // return team with higher votes
            return t1 - t2; // return team with lower alphabetically letter
        });
        for (int i = 0; i < ans.length; i++) ans[i] = tmp[i];
        return new String(ans);
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String[] votes=sc.nextLine().split(" ");
		System.out.println(new TeamRanks().rankTeams(votes));
	}	
}







Program-2

Ramu is given a integer n . 
Where he can swap two digits at most once to get the 
maximum value of the given integer . 

Help him to return the maximum value of the integer 

input = 2736
output = 7236 

Swap the number 2 and the number 7


input = 9973
output = 9973

No swap required 


back end test cases

case = 1
input = 12
output = 21

case = 2
input = 100
output = 100

case = 3
input = 1001
output = 1100

case = 4
input = 1234
output = 4231

import java.util.*;
class Solution {
    public int maximumSwap(int num) {
        char nums[]=Integer.toString(num).toCharArray();
        
        int rightGreater[]=new int [nums.length];
        Arrays.fill(rightGreater,Integer.MIN_VALUE);
        
        int indexGreater[]=new int [nums.length];
        Arrays.fill(indexGreater,-1);
        
        for(int i=nums.length-2;i>=0;i--){
            
            if(rightGreater[i+1]>=nums[i]-'0'){
                rightGreater[i]=rightGreater[i+1];
                indexGreater[i]=indexGreater[i+1];
            }
            else if(nums[i+1]>=nums[i]){
                rightGreater[i]=nums[i+1]-'0';
                indexGreater[i]=i+1;
            }
        }
        
        for(int i=0;i<nums.length;i++){
            if(nums[i]-'0'< rightGreater[i]){
                swap(nums,i,indexGreater[i]);
                return Integer.valueOf(new String(nums));
            }
        }
        return num;
    }
    
    public void swap(char nums[],int i,int j){
        char temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
	public static void main(String [] args)
	{
	Scanner sc = new Scanner(System.in);
	int n = sc.nextInt();
      System.out.println(new Solution().maximumSwap(n));
	}
}